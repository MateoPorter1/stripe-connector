// Servicio para llamar al backend en lugar de Stripe directamente
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

const getAuthHeader = () => {
  // Sin autenticaciรณn para uso local
  return {
    'Content-Type': 'application/json'
  };
};

export const getFailedTransactions = async (limit = 100, startDate = null, endDate = null) => {
  try {
    let url = `${API_URL}/stripe/failed-transactions?limit=${limit}`;

    if (startDate) {
      url += `&startDate=${startDate}`;
    }
    if (endDate) {
      url += `&endDate=${endDate}`;
    }

    const response = await fetch(url, {
      headers: getAuthHeader()
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || 'Error fetching transactions');
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching transactions:', error);
    return {
      success: false,
      error: error.message,
      transactions: []
    };
  }
};

export const getCustomerInfo = async (customerId) => {
  if (!customerId) return null;

  try {
    const response = await fetch(`${API_URL}/stripe/customer/${customerId}`, {
      headers: getAuthHeader()
    });

    if (!response.ok) return null;

    const data = await response.json();
    return data.customer;
  } catch (error) {
    console.error('Error fetching customer information:', error);
    return null;
  }
};

export const getCustomerPaymentMethods = async (customerId) => {
  if (!customerId) return { count: 0, methods: [] };

  try {
    const response = await fetch(`${API_URL}/stripe/payment-methods/${customerId}`, {
      headers: getAuthHeader()
    });

    if (!response.ok) return { count: 0, methods: [] };

    const data = await response.json();
    return {
      count: data.count,
      methods: data.methods
    };
  } catch (error) {
    console.error('Error fetching customer payment methods:', error);
    return { count: 0, methods: [] };
  }
};

export const retryCustomerPayment = async (paymentIntentId, customerId) => {
  try {
    const response = await fetch(`${API_URL}/stripe/retry-payment`, {
      method: 'POST',
      headers: getAuthHeader(),
      body: JSON.stringify({ paymentIntentId, customerId })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || 'Error retrying payment');
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error in retry customer payment:', error);
    return {
      success: false,
      message: error.message,
      attempts: []
    };
  }
};

// Utility functions (no cambian)
export const formatCurrency = (amount, currency = 'usd') => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency.toUpperCase(),
  }).format(amount / 100);
};

export const formatDate = (timestamp) => {
  return new Date(timestamp * 1000).toLocaleString('en-US', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
};

export const getCountryFlag = (countryCode) => {
  if (!countryCode || countryCode.length !== 2) return '๐ณ๏ธ';

  const countryFlags = {
    'US': '๐บ๐ธ', 'CA': '๐จ๐ฆ', 'MX': '๐ฒ๐ฝ', 'GB': '๐ฌ๐ง', 'DE': '๐ฉ๐ช',
    'FR': '๐ซ๐ท', 'ES': '๐ช๐ธ', 'IT': '๐ฎ๐น', 'BR': '๐ง๐ท', 'AR': '๐ฆ๐ท',
    'AU': '๐ฆ๐บ', 'JP': '๐ฏ๐ต', 'CN': '๐จ๐ณ', 'IN': '๐ฎ๐ณ', 'RU': '๐ท๐บ',
    'KR': '๐ฐ๐ท', 'SG': '๐ธ๐ฌ', 'HK': '๐ญ๐ฐ', 'NL': '๐ณ๐ฑ', 'SE': '๐ธ๐ช',
    'NO': '๐ณ๐ด', 'DK': '๐ฉ๐ฐ', 'FI': '๐ซ๐ฎ', 'PL': '๐ต๐ฑ', 'CZ': '๐จ๐ฟ',
    'AT': '๐ฆ๐น', 'CH': '๐จ๐ญ', 'BE': '๐ง๐ช', 'IE': '๐ฎ๐ช', 'PT': '๐ต๐น',
    'GR': '๐ฌ๐ท', 'TR': '๐น๐ท', 'IL': '๐ฎ๐ฑ', 'SA': '๐ธ๐ฆ', 'AE': '๐ฆ๐ช',
    'ZA': '๐ฟ๐ฆ', 'EG': '๐ช๐ฌ', 'NG': '๐ณ๐ฌ', 'KE': '๐ฐ๐ช', 'GH': '๐ฌ๐ญ',
    'TH': '๐น๐ญ', 'VN': '๐ป๐ณ', 'PH': '๐ต๐ญ', 'ID': '๐ฎ๐ฉ', 'MY': '๐ฒ๐พ',
    'NZ': '๐ณ๐ฟ', 'CL': '๐จ๐ฑ', 'CO': '๐จ๐ด', 'PE': '๐ต๐ช', 'VE': '๐ป๐ช'
  };

  return countryFlags[countryCode.toUpperCase()] || '๐ณ๏ธ';
};
